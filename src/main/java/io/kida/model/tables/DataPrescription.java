/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables;


import io.kida.model.Indexes;
import io.kida.model.Keys;
import io.kida.model.Tools;
import io.kida.model.tables.records.DataPrescriptionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 方剂数据
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataPrescription extends TableImpl<DataPrescriptionRecord> {

    private static final long serialVersionUID = 1962329165;

    /**
     * The reference instance of <code>tools.data_prescription</code>
     */
    public static final DataPrescription DATA_PRESCRIPTION = new DataPrescription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataPrescriptionRecord> getRecordType() {
        return DataPrescriptionRecord.class;
    }

    /**
     * The column <code>tools.data_prescription.drug_name</code>. 药品名称
     */
    public final TableField<DataPrescriptionRecord, String> DRUG_NAME = createField(DSL.name("drug_name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "药品名称");

    /**
     * The column <code>tools.data_prescription.variety</code>. 品种数据
     */
    public final TableField<DataPrescriptionRecord, String> VARIETY = createField(DSL.name("variety"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "品种数据");

    /**
     * Create a <code>tools.data_prescription</code> table reference
     */
    public DataPrescription() {
        this(DSL.name("data_prescription"), null);
    }

    /**
     * Create an aliased <code>tools.data_prescription</code> table reference
     */
    public DataPrescription(String alias) {
        this(DSL.name(alias), DATA_PRESCRIPTION);
    }

    /**
     * Create an aliased <code>tools.data_prescription</code> table reference
     */
    public DataPrescription(Name alias) {
        this(alias, DATA_PRESCRIPTION);
    }

    private DataPrescription(Name alias, Table<DataPrescriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataPrescription(Name alias, Table<DataPrescriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("方剂数据"), TableOptions.table());
    }

    public <O extends Record> DataPrescription(Table<O> child, ForeignKey<O, DataPrescriptionRecord> key) {
        super(child, key, DATA_PRESCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return Tools.TOOLS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_PRESCRIPTION_DP_DRUG_NAME, Indexes.DATA_PRESCRIPTION_DP_VARIETY);
    }

    @Override
    public List<UniqueKey<DataPrescriptionRecord>> getKeys() {
        return Arrays.<UniqueKey<DataPrescriptionRecord>>asList(Keys.KEY_DATA_PRESCRIPTION_UNI_DP_KEY);
    }

    @Override
    public DataPrescription as(String alias) {
        return new DataPrescription(DSL.name(alias), this);
    }

    @Override
    public DataPrescription as(Name alias) {
        return new DataPrescription(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataPrescription rename(String name) {
        return new DataPrescription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataPrescription rename(Name name) {
        return new DataPrescription(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
