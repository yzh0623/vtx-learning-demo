/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables;


import io.kida.model.Indexes;
import io.kida.model.Keys;
import io.kida.model.Tools;
import io.kida.model.tables.records.DataVarietyEnterpriceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 品种与企业对应数据
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataVarietyEnterprice extends TableImpl<DataVarietyEnterpriceRecord> {

    private static final long serialVersionUID = -1930811770;

    /**
     * The reference instance of <code>tools.data_variety_enterprice</code>
     */
    public static final DataVarietyEnterprice DATA_VARIETY_ENTERPRICE = new DataVarietyEnterprice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DataVarietyEnterpriceRecord> getRecordType() {
        return DataVarietyEnterpriceRecord.class;
    }

    /**
     * The column <code>tools.data_variety_enterprice.variety</code>. 药品品种
     */
    public final TableField<DataVarietyEnterpriceRecord, String> VARIETY = createField(DSL.name("variety"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "药品品种");

    /**
     * The column <code>tools.data_variety_enterprice.enterprice</code>. 药企名称
     */
    public final TableField<DataVarietyEnterpriceRecord, String> ENTERPRICE = createField(DSL.name("enterprice"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "药企名称");

    /**
     * The column <code>tools.data_variety_enterprice.enterprice_role</code>. 药企角色
     */
    public final TableField<DataVarietyEnterpriceRecord, String> ENTERPRICE_ROLE = createField(DSL.name("enterprice_role"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "药企角色");

    /**
     * The column <code>tools.data_variety_enterprice.email</code>. 电子邮箱
     */
    public final TableField<DataVarietyEnterpriceRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "电子邮箱");

    /**
     * The column <code>tools.data_variety_enterprice.contact_phone</code>. 联系电话
     */
    public final TableField<DataVarietyEnterpriceRecord, String> CONTACT_PHONE = createField(DSL.name("contact_phone"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "联系电话");

    /**
     * The column <code>tools.data_variety_enterprice.company_address</code>. 联系地址
     */
    public final TableField<DataVarietyEnterpriceRecord, String> COMPANY_ADDRESS = createField(DSL.name("company_address"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "联系地址");

    /**
     * The column <code>tools.data_variety_enterprice.contact_name</code>. 联系人
     */
    public final TableField<DataVarietyEnterpriceRecord, String> CONTACT_NAME = createField(DSL.name("contact_name"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "联系人");

    /**
     * The column <code>tools.data_variety_enterprice.variety_type</code>. 品种类型
     */
    public final TableField<DataVarietyEnterpriceRecord, String> VARIETY_TYPE = createField(DSL.name("variety_type"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "品种类型");

    /**
     * Create a <code>tools.data_variety_enterprice</code> table reference
     */
    public DataVarietyEnterprice() {
        this(DSL.name("data_variety_enterprice"), null);
    }

    /**
     * Create an aliased <code>tools.data_variety_enterprice</code> table reference
     */
    public DataVarietyEnterprice(String alias) {
        this(DSL.name(alias), DATA_VARIETY_ENTERPRICE);
    }

    /**
     * Create an aliased <code>tools.data_variety_enterprice</code> table reference
     */
    public DataVarietyEnterprice(Name alias) {
        this(alias, DATA_VARIETY_ENTERPRICE);
    }

    private DataVarietyEnterprice(Name alias, Table<DataVarietyEnterpriceRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataVarietyEnterprice(Name alias, Table<DataVarietyEnterpriceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("品种与企业对应数据"), TableOptions.table());
    }

    public <O extends Record> DataVarietyEnterprice(Table<O> child, ForeignKey<O, DataVarietyEnterpriceRecord> key) {
        super(child, key, DATA_VARIETY_ENTERPRICE);
    }

    @Override
    public Schema getSchema() {
        return Tools.TOOLS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DATA_VARIETY_ENTERPRICE_DVE_VARIETY);
    }

    @Override
    public List<UniqueKey<DataVarietyEnterpriceRecord>> getKeys() {
        return Arrays.<UniqueKey<DataVarietyEnterpriceRecord>>asList(Keys.KEY_DATA_VARIETY_ENTERPRICE_UNI_DVE_KEY);
    }

    @Override
    public DataVarietyEnterprice as(String alias) {
        return new DataVarietyEnterprice(DSL.name(alias), this);
    }

    @Override
    public DataVarietyEnterprice as(Name alias) {
        return new DataVarietyEnterprice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DataVarietyEnterprice rename(String name) {
        return new DataVarietyEnterprice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DataVarietyEnterprice rename(Name name) {
        return new DataVarietyEnterprice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
