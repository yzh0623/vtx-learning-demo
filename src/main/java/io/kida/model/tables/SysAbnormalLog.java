/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables;


import io.kida.model.Indexes;
import io.kida.model.Keys;
import io.kida.model.Tools;
import io.kida.model.tables.records.SysAbnormalLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 异常日志表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysAbnormalLog extends TableImpl<SysAbnormalLogRecord> {

    private static final long serialVersionUID = 549134307;

    /**
     * The reference instance of <code>tools.sys_abnormal_log</code>
     */
    public static final SysAbnormalLog SYS_ABNORMAL_LOG = new SysAbnormalLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysAbnormalLogRecord> getRecordType() {
        return SysAbnormalLogRecord.class;
    }

    /**
     * The column <code>tools.sys_abnormal_log.ID</code>.
     */
    public final TableField<SysAbnormalLogRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>tools.sys_abnormal_log.USERNAME</code>. 操作用户
     */
    public final TableField<SysAbnormalLogRecord, String> USERNAME = createField(DSL.name("USERNAME"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "操作用户");

    /**
     * The column <code>tools.sys_abnormal_log.URL</code>. 请求地址
     */
    public final TableField<SysAbnormalLogRecord, String> URL = createField(DSL.name("URL"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "请求地址");

    /**
     * The column <code>tools.sys_abnormal_log.METHOD</code>. 执行方法
     */
    public final TableField<SysAbnormalLogRecord, String> METHOD = createField(DSL.name("METHOD"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "执行方法");

    /**
     * The column <code>tools.sys_abnormal_log.PARAMS</code>. 请求参数
     */
    public final TableField<SysAbnormalLogRecord, String> PARAMS = createField(DSL.name("PARAMS"), org.jooq.impl.SQLDataType.CLOB, this, "请求参数");

    /**
     * The column <code>tools.sys_abnormal_log.REQUESTIP</code>. 请求IP
     */
    public final TableField<SysAbnormalLogRecord, String> REQUESTIP = createField(DSL.name("REQUESTIP"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "请求IP");

    /**
     * The column <code>tools.sys_abnormal_log.DETAIL</code>. 异常详情
     */
    public final TableField<SysAbnormalLogRecord, String> DETAIL = createField(DSL.name("DETAIL"), org.jooq.impl.SQLDataType.CLOB, this, "异常详情");

    /**
     * The column <code>tools.sys_abnormal_log.OPER_DATE</code>. 操作日期
     */
    public final TableField<SysAbnormalLogRecord, LocalDateTime> OPER_DATE = createField(DSL.name("OPER_DATE"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "操作日期");

    /**
     * The column <code>tools.sys_abnormal_log.CONSUME_TIME</code>. 耗时(秒)
     */
    public final TableField<SysAbnormalLogRecord, Double> CONSUME_TIME = createField(DSL.name("CONSUME_TIME"), org.jooq.impl.SQLDataType.DOUBLE, this, "耗时(秒)");

    /**
     * Create a <code>tools.sys_abnormal_log</code> table reference
     */
    public SysAbnormalLog() {
        this(DSL.name("sys_abnormal_log"), null);
    }

    /**
     * Create an aliased <code>tools.sys_abnormal_log</code> table reference
     */
    public SysAbnormalLog(String alias) {
        this(DSL.name(alias), SYS_ABNORMAL_LOG);
    }

    /**
     * Create an aliased <code>tools.sys_abnormal_log</code> table reference
     */
    public SysAbnormalLog(Name alias) {
        this(alias, SYS_ABNORMAL_LOG);
    }

    private SysAbnormalLog(Name alias, Table<SysAbnormalLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysAbnormalLog(Name alias, Table<SysAbnormalLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("异常日志表"), TableOptions.table());
    }

    public <O extends Record> SysAbnormalLog(Table<O> child, ForeignKey<O, SysAbnormalLogRecord> key) {
        super(child, key, SYS_ABNORMAL_LOG);
    }

    @Override
    public Schema getSchema() {
        return Tools.TOOLS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_ABNORMAL_LOG_IDX_SAL_OPER_DATE, Indexes.SYS_ABNORMAL_LOG_IDX_SAL_REQUESTIP, Indexes.SYS_ABNORMAL_LOG_IDX_SAL_USERNAME);
    }

    @Override
    public Identity<SysAbnormalLogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SYS_ABNORMAL_LOG;
    }

    @Override
    public UniqueKey<SysAbnormalLogRecord> getPrimaryKey() {
        return Keys.KEY_SYS_ABNORMAL_LOG_PRIMARY;
    }

    @Override
    public List<UniqueKey<SysAbnormalLogRecord>> getKeys() {
        return Arrays.<UniqueKey<SysAbnormalLogRecord>>asList(Keys.KEY_SYS_ABNORMAL_LOG_PRIMARY);
    }

    @Override
    public SysAbnormalLog as(String alias) {
        return new SysAbnormalLog(DSL.name(alias), this);
    }

    @Override
    public SysAbnormalLog as(Name alias) {
        return new SysAbnormalLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysAbnormalLog rename(String name) {
        return new SysAbnormalLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysAbnormalLog rename(Name name) {
        return new SysAbnormalLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, LocalDateTime, Double> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
