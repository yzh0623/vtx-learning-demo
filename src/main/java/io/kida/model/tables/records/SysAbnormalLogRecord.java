/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.UnexpectedJsonValueType;
import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.kida.model.tables.SysAbnormalLog;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 异常日志表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysAbnormalLogRecord extends UpdatableRecordImpl<SysAbnormalLogRecord> implements VertxPojo, Record9<Integer, String, String, String, String, String, String, LocalDateTime, Double> {

    private static final long serialVersionUID = 1446784482;

    /**
     * Setter for <code>tools.sys_abnormal_log.ID</code>.
     */
    public SysAbnormalLogRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>tools.sys_abnormal_log.USERNAME</code>. 操作用户
     */
    public SysAbnormalLogRecord setUsername(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.USERNAME</code>. 操作用户
     */
    public String getUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>tools.sys_abnormal_log.URL</code>. 请求地址
     */
    public SysAbnormalLogRecord setUrl(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.URL</code>. 请求地址
     */
    public String getUrl() {
        return (String) get(2);
    }

    /**
     * Setter for <code>tools.sys_abnormal_log.METHOD</code>. 执行方法
     */
    public SysAbnormalLogRecord setMethod(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.METHOD</code>. 执行方法
     */
    public String getMethod() {
        return (String) get(3);
    }

    /**
     * Setter for <code>tools.sys_abnormal_log.PARAMS</code>. 请求参数
     */
    public SysAbnormalLogRecord setParams(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.PARAMS</code>. 请求参数
     */
    public String getParams() {
        return (String) get(4);
    }

    /**
     * Setter for <code>tools.sys_abnormal_log.REQUESTIP</code>. 请求IP
     */
    public SysAbnormalLogRecord setRequestip(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.REQUESTIP</code>. 请求IP
     */
    public String getRequestip() {
        return (String) get(5);
    }

    /**
     * Setter for <code>tools.sys_abnormal_log.DETAIL</code>. 异常详情
     */
    public SysAbnormalLogRecord setDetail(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.DETAIL</code>. 异常详情
     */
    public String getDetail() {
        return (String) get(6);
    }

    /**
     * Setter for <code>tools.sys_abnormal_log.OPER_DATE</code>. 操作日期
     */
    public SysAbnormalLogRecord setOperDate(LocalDateTime value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.OPER_DATE</code>. 操作日期
     */
    public LocalDateTime getOperDate() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>tools.sys_abnormal_log.CONSUME_TIME</code>. 耗时(秒)
     */
    public SysAbnormalLogRecord setConsumeTime(Double value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>tools.sys_abnormal_log.CONSUME_TIME</code>. 耗时(秒)
     */
    public Double getConsumeTime() {
        return (Double) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, String, LocalDateTime, Double> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Integer, String, String, String, String, String, String, LocalDateTime, Double> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.ID;
    }

    @Override
    public Field<String> field2() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.USERNAME;
    }

    @Override
    public Field<String> field3() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.URL;
    }

    @Override
    public Field<String> field4() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.METHOD;
    }

    @Override
    public Field<String> field5() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.PARAMS;
    }

    @Override
    public Field<String> field6() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.REQUESTIP;
    }

    @Override
    public Field<String> field7() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.DETAIL;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.OPER_DATE;
    }

    @Override
    public Field<Double> field9() {
        return SysAbnormalLog.SYS_ABNORMAL_LOG.CONSUME_TIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUsername();
    }

    @Override
    public String component3() {
        return getUrl();
    }

    @Override
    public String component4() {
        return getMethod();
    }

    @Override
    public String component5() {
        return getParams();
    }

    @Override
    public String component6() {
        return getRequestip();
    }

    @Override
    public String component7() {
        return getDetail();
    }

    @Override
    public LocalDateTime component8() {
        return getOperDate();
    }

    @Override
    public Double component9() {
        return getConsumeTime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUsername();
    }

    @Override
    public String value3() {
        return getUrl();
    }

    @Override
    public String value4() {
        return getMethod();
    }

    @Override
    public String value5() {
        return getParams();
    }

    @Override
    public String value6() {
        return getRequestip();
    }

    @Override
    public String value7() {
        return getDetail();
    }

    @Override
    public LocalDateTime value8() {
        return getOperDate();
    }

    @Override
    public Double value9() {
        return getConsumeTime();
    }

    @Override
    public SysAbnormalLogRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord value2(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord value3(String value) {
        setUrl(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord value4(String value) {
        setMethod(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord value5(String value) {
        setParams(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord value6(String value) {
        setRequestip(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord value7(String value) {
        setDetail(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord value8(LocalDateTime value) {
        setOperDate(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord value9(Double value) {
        setConsumeTime(value);
        return this;
    }

    @Override
    public SysAbnormalLogRecord values(Integer value1, String value2, String value3, String value4, String value5, String value6, String value7, LocalDateTime value8, Double value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SysAbnormalLogRecord
     */
    public SysAbnormalLogRecord() {
        super(SysAbnormalLog.SYS_ABNORMAL_LOG);
    }

    /**
     * Create a detached, initialised SysAbnormalLogRecord
     */
    public SysAbnormalLogRecord(Integer id, String username, String url, String method, String params, String requestip, String detail, LocalDateTime operDate, Double consumeTime) {
        super(SysAbnormalLog.SYS_ABNORMAL_LOG);

        set(0, id);
        set(1, username);
        set(2, url);
        set(3, method);
        set(4, params);
        set(5, requestip);
        set(6, detail);
        set(7, operDate);
        set(8, consumeTime);
    }

    public SysAbnormalLogRecord(io.vertx.core.json.JsonObject json) {
        this();
        fromJson(json);
    }

    @Override
    public SysAbnormalLogRecord fromJson(io.vertx.core.json.JsonObject json) {
        try {
            setId(json.getInteger("ID"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("ID","java.lang.Integer",e);
        }
        try {
            setUsername(json.getString("USERNAME"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("USERNAME","java.lang.String",e);
        }
        try {
            setUrl(json.getString("URL"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("URL","java.lang.String",e);
        }
        try {
            setMethod(json.getString("METHOD"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("METHOD","java.lang.String",e);
        }
        try {
            setParams(json.getString("PARAMS"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("PARAMS","java.lang.String",e);
        }
        try {
            setRequestip(json.getString("REQUESTIP"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("REQUESTIP","java.lang.String",e);
        }
        try {
            setDetail(json.getString("DETAIL"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("DETAIL","java.lang.String",e);
        }
        try {
            // Omitting unrecognized type java.time.LocalDateTime for column OPER_DATE!
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("OPER_DATE","java.time.LocalDateTime",e);
        }
        try {
            setConsumeTime(json.getDouble("CONSUME_TIME"));
        } catch (java.lang.ClassCastException e) {
            throw new UnexpectedJsonValueType("CONSUME_TIME","java.lang.Double",e);
        }
        return this;
    }


    @Override
    public io.vertx.core.json.JsonObject toJson() {
        io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
        json.put("ID",getId());
        json.put("USERNAME",getUsername());
        json.put("URL",getUrl());
        json.put("METHOD",getMethod());
        json.put("PARAMS",getParams());
        json.put("REQUESTIP",getRequestip());
        json.put("DETAIL",getDetail());
        // Omitting unrecognized type java.time.LocalDateTime for column OPER_DATE!
        json.put("CONSUME_TIME",getConsumeTime());
        return json;
    }

}
