/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables;


import io.kida.model.Keys;
import io.kida.model.Tools;
import io.kida.model.tables.records.SysDataDictRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 数据字典表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysDataDict extends TableImpl<SysDataDictRecord> {

    private static final long serialVersionUID = 634507389;

    /**
     * The reference instance of <code>tools.sys_data_dict</code>
     */
    public static final SysDataDict SYS_DATA_DICT = new SysDataDict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysDataDictRecord> getRecordType() {
        return SysDataDictRecord.class;
    }

    /**
     * The column <code>tools.sys_data_dict.did</code>. 字典id
     */
    public final TableField<SysDataDictRecord, String> DID = createField(DSL.name("did"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "字典id");

    /**
     * The column <code>tools.sys_data_dict.parent_id</code>. 父id
     */
    public final TableField<SysDataDictRecord, String> PARENT_ID = createField(DSL.name("parent_id"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "父id");

    /**
     * The column <code>tools.sys_data_dict.dcode</code>. 字典编码
     */
    public final TableField<SysDataDictRecord, String> DCODE = createField(DSL.name("dcode"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "字典编码");

    /**
     * The column <code>tools.sys_data_dict.dname</code>. 字典名称
     */
    public final TableField<SysDataDictRecord, String> DNAME = createField(DSL.name("dname"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "字典名称");

    /**
     * Create a <code>tools.sys_data_dict</code> table reference
     */
    public SysDataDict() {
        this(DSL.name("sys_data_dict"), null);
    }

    /**
     * Create an aliased <code>tools.sys_data_dict</code> table reference
     */
    public SysDataDict(String alias) {
        this(DSL.name(alias), SYS_DATA_DICT);
    }

    /**
     * Create an aliased <code>tools.sys_data_dict</code> table reference
     */
    public SysDataDict(Name alias) {
        this(alias, SYS_DATA_DICT);
    }

    private SysDataDict(Name alias, Table<SysDataDictRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysDataDict(Name alias, Table<SysDataDictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("数据字典表"), TableOptions.table());
    }

    public <O extends Record> SysDataDict(Table<O> child, ForeignKey<O, SysDataDictRecord> key) {
        super(child, key, SYS_DATA_DICT);
    }

    @Override
    public Schema getSchema() {
        return Tools.TOOLS;
    }

    @Override
    public UniqueKey<SysDataDictRecord> getPrimaryKey() {
        return Keys.KEY_SYS_DATA_DICT_PRIMARY;
    }

    @Override
    public List<UniqueKey<SysDataDictRecord>> getKeys() {
        return Arrays.<UniqueKey<SysDataDictRecord>>asList(Keys.KEY_SYS_DATA_DICT_PRIMARY);
    }

    @Override
    public SysDataDict as(String alias) {
        return new SysDataDict(DSL.name(alias), this);
    }

    @Override
    public SysDataDict as(Name alias) {
        return new SysDataDict(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysDataDict rename(String name) {
        return new SysDataDict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysDataDict rename(Name name) {
        return new SysDataDict(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
