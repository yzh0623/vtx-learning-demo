/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables;


import io.kida.model.Indexes;
import io.kida.model.Keys;
import io.kida.model.Tools;
import io.kida.model.tables.records.SysUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysUser extends TableImpl<SysUserRecord> {

    private static final long serialVersionUID = 552249769;

    /**
     * The reference instance of <code>tools.sys_user</code>
     */
    public static final SysUser SYS_USER = new SysUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysUserRecord> getRecordType() {
        return SysUserRecord.class;
    }

    /**
     * The column <code>tools.sys_user.USER_ID</code>. 用户表主键
     */
    public final TableField<SysUserRecord, Long> USER_ID = createField(DSL.name("USER_ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "用户表主键");

    /**
     * The column <code>tools.sys_user.USER_ACCOUNT</code>. 登录账号
     */
    public final TableField<SysUserRecord, String> USER_ACCOUNT = createField(DSL.name("USER_ACCOUNT"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "登录账号");

    /**
     * The column <code>tools.sys_user.USER_PASSWORD</code>. 登录密码
     */
    public final TableField<SysUserRecord, String> USER_PASSWORD = createField(DSL.name("USER_PASSWORD"), org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "登录密码");

    /**
     * The column <code>tools.sys_user.USER_NAME</code>. 用户名称
     */
    public final TableField<SysUserRecord, String> USER_NAME = createField(DSL.name("USER_NAME"), org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "用户名称");

    /**
     * The column <code>tools.sys_user.PHONE</code>. 手机
     */
    public final TableField<SysUserRecord, String> PHONE = createField(DSL.name("PHONE"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "手机");

    /**
     * The column <code>tools.sys_user.ADD_TIME</code>. 创建时间
     */
    public final TableField<SysUserRecord, LocalDateTime> ADD_TIME = createField(DSL.name("ADD_TIME"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "创建时间");

    /**
     * The column <code>tools.sys_user.LOGIN_TIME</code>. 登录时间
     */
    public final TableField<SysUserRecord, LocalDateTime> LOGIN_TIME = createField(DSL.name("LOGIN_TIME"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "登录时间");

    /**
     * The column <code>tools.sys_user.LOGIN_IP</code>. 登录IP
     */
    public final TableField<SysUserRecord, String> LOGIN_IP = createField(DSL.name("LOGIN_IP"), org.jooq.impl.SQLDataType.VARCHAR(16), this, "登录IP");

    /**
     * The column <code>tools.sys_user.STATUS</code>. 状态.1:启用,0:禁用,-1:删除
     */
    public final TableField<SysUserRecord, Integer> STATUS = createField(DSL.name("STATUS"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态.1:启用,0:禁用,-1:删除");

    /**
     * The column <code>tools.sys_user.WX_ID</code>. 绑定微信id
     */
    public final TableField<SysUserRecord, String> WX_ID = createField(DSL.name("WX_ID"), org.jooq.impl.SQLDataType.VARCHAR(128), this, "绑定微信id");

    /**
     * The column <code>tools.sys_user.IMG_URL</code>. 图片url地址
     */
    public final TableField<SysUserRecord, String> IMG_URL = createField(DSL.name("IMG_URL"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "图片url地址");

    /**
     * The column <code>tools.sys_user.MAIL</code>.
     */
    public final TableField<SysUserRecord, String> MAIL = createField(DSL.name("MAIL"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>tools.sys_user</code> table reference
     */
    public SysUser() {
        this(DSL.name("sys_user"), null);
    }

    /**
     * Create an aliased <code>tools.sys_user</code> table reference
     */
    public SysUser(String alias) {
        this(DSL.name(alias), SYS_USER);
    }

    /**
     * Create an aliased <code>tools.sys_user</code> table reference
     */
    public SysUser(Name alias) {
        this(alias, SYS_USER);
    }

    private SysUser(Name alias, Table<SysUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysUser(Name alias, Table<SysUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户表"), TableOptions.table());
    }

    public <O extends Record> SysUser(Table<O> child, ForeignKey<O, SysUserRecord> key) {
        super(child, key, SYS_USER);
    }

    @Override
    public Schema getSchema() {
        return Tools.TOOLS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_USER_IDX_STATUS);
    }

    @Override
    public Identity<SysUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_SYS_USER;
    }

    @Override
    public UniqueKey<SysUserRecord> getPrimaryKey() {
        return Keys.KEY_SYS_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<SysUserRecord>> getKeys() {
        return Arrays.<UniqueKey<SysUserRecord>>asList(Keys.KEY_SYS_USER_PRIMARY, Keys.KEY_SYS_USER_UK_SYS_USER_ACCOUNT);
    }

    @Override
    public SysUser as(String alias) {
        return new SysUser(DSL.name(alias), this);
    }

    @Override
    public SysUser as(Name alias) {
        return new SysUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysUser rename(String name) {
        return new SysUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysUser rename(Name name) {
        return new SysUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, String, String, String, String, LocalDateTime, LocalDateTime, String, Integer, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
