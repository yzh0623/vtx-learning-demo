/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.kida.model.tables.SysRolePermission;
import io.kida.model.tables.records.SysRolePermissionRecord;

import java.util.Collection;

import org.jooq.Configuration;
import org.jooq.Record2;


import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO;
import io.github.jklingsporn.vertx.jooq.completablefuture.jdbc.JDBCCompletableFutureQueryExecutor;
/**
 * 角色权限关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysRolePermissionDao extends AbstractVertxDAO<SysRolePermissionRecord, io.kida.model.tables.pojos.SysRolePermission, Record2<Long, Long>, CompletableFuture<List<io.kida.model.tables.pojos.SysRolePermission>>, CompletableFuture<io.kida.model.tables.pojos.SysRolePermission>, CompletableFuture<Integer>, CompletableFuture<Record2<Long, Long>>> implements io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO<SysRolePermissionRecord,io.kida.model.tables.pojos.SysRolePermission,Record2<Long, Long>> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public SysRolePermissionDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(SysRolePermission.SYS_ROLE_PERMISSION, io.kida.model.tables.pojos.SysRolePermission.class, new JDBCCompletableFutureQueryExecutor<SysRolePermissionRecord,io.kida.model.tables.pojos.SysRolePermission,Record2<Long, Long>>(configuration,io.kida.model.tables.pojos.SysRolePermission.class,vertx));
    }

    @Override
    protected Record2<Long, Long> getId(io.kida.model.tables.pojos.SysRolePermission object) {
        return compositeKeyRecord(object.getRoleId(), object.getPermissionId());
    }

    /**
     * Find records that have <code>PERMISSION_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRolePermission>> findManyByPermissionId(Collection<Long> values) {
        return findManyByCondition(SysRolePermission.SYS_ROLE_PERMISSION.PERMISSION_ID.in(values));
    }

    @Override
    public JDBCCompletableFutureQueryExecutor<SysRolePermissionRecord,io.kida.model.tables.pojos.SysRolePermission,Record2<Long, Long>> queryExecutor(){
        return (JDBCCompletableFutureQueryExecutor<SysRolePermissionRecord,io.kida.model.tables.pojos.SysRolePermission,Record2<Long, Long>>) super.queryExecutor();
    }
}
