/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.kida.model.tables.SysAbnormalLog;
import io.kida.model.tables.records.SysAbnormalLogRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO;
import io.github.jklingsporn.vertx.jooq.completablefuture.jdbc.JDBCCompletableFutureQueryExecutor;
/**
 * 异常日志表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysAbnormalLogDao extends AbstractVertxDAO<SysAbnormalLogRecord, io.kida.model.tables.pojos.SysAbnormalLog, Integer, CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>>, CompletableFuture<io.kida.model.tables.pojos.SysAbnormalLog>, CompletableFuture<Integer>, CompletableFuture<Integer>> implements io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO<SysAbnormalLogRecord,io.kida.model.tables.pojos.SysAbnormalLog,Integer> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public SysAbnormalLogDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(SysAbnormalLog.SYS_ABNORMAL_LOG, io.kida.model.tables.pojos.SysAbnormalLog.class, new JDBCCompletableFutureQueryExecutor<SysAbnormalLogRecord,io.kida.model.tables.pojos.SysAbnormalLog,Integer>(configuration,io.kida.model.tables.pojos.SysAbnormalLog.class,vertx));
    }

    @Override
    protected Integer getId(io.kida.model.tables.pojos.SysAbnormalLog object) {
        return object.getId();
    }

    /**
     * Find records that have <code>USERNAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>> findManyByUsername(Collection<String> values) {
        return findManyByCondition(SysAbnormalLog.SYS_ABNORMAL_LOG.USERNAME.in(values));
    }

    /**
     * Find records that have <code>URL IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>> findManyByUrl(Collection<String> values) {
        return findManyByCondition(SysAbnormalLog.SYS_ABNORMAL_LOG.URL.in(values));
    }

    /**
     * Find records that have <code>METHOD IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>> findManyByMethod(Collection<String> values) {
        return findManyByCondition(SysAbnormalLog.SYS_ABNORMAL_LOG.METHOD.in(values));
    }

    /**
     * Find records that have <code>PARAMS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>> findManyByParams(Collection<String> values) {
        return findManyByCondition(SysAbnormalLog.SYS_ABNORMAL_LOG.PARAMS.in(values));
    }

    /**
     * Find records that have <code>REQUESTIP IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>> findManyByRequestip(Collection<String> values) {
        return findManyByCondition(SysAbnormalLog.SYS_ABNORMAL_LOG.REQUESTIP.in(values));
    }

    /**
     * Find records that have <code>DETAIL IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>> findManyByDetail(Collection<String> values) {
        return findManyByCondition(SysAbnormalLog.SYS_ABNORMAL_LOG.DETAIL.in(values));
    }

    /**
     * Find records that have <code>OPER_DATE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>> findManyByOperDate(Collection<LocalDateTime> values) {
        return findManyByCondition(SysAbnormalLog.SYS_ABNORMAL_LOG.OPER_DATE.in(values));
    }

    /**
     * Find records that have <code>CONSUME_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysAbnormalLog>> findManyByConsumeTime(Collection<Double> values) {
        return findManyByCondition(SysAbnormalLog.SYS_ABNORMAL_LOG.CONSUME_TIME.in(values));
    }

    @Override
    public JDBCCompletableFutureQueryExecutor<SysAbnormalLogRecord,io.kida.model.tables.pojos.SysAbnormalLog,Integer> queryExecutor(){
        return (JDBCCompletableFutureQueryExecutor<SysAbnormalLogRecord,io.kida.model.tables.pojos.SysAbnormalLog,Integer>) super.queryExecutor();
    }
}
