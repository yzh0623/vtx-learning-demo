/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.kida.model.tables.SysUser;
import io.kida.model.tables.records.SysUserRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO;
import io.github.jklingsporn.vertx.jooq.completablefuture.jdbc.JDBCCompletableFutureQueryExecutor;
/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysUserDao extends AbstractVertxDAO<SysUserRecord, io.kida.model.tables.pojos.SysUser, Long, CompletableFuture<List<io.kida.model.tables.pojos.SysUser>>, CompletableFuture<io.kida.model.tables.pojos.SysUser>, CompletableFuture<Integer>, CompletableFuture<Long>> implements io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO<SysUserRecord,io.kida.model.tables.pojos.SysUser,Long> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public SysUserDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(SysUser.SYS_USER, io.kida.model.tables.pojos.SysUser.class, new JDBCCompletableFutureQueryExecutor<SysUserRecord,io.kida.model.tables.pojos.SysUser,Long>(configuration,io.kida.model.tables.pojos.SysUser.class,vertx));
    }

    @Override
    protected Long getId(io.kida.model.tables.pojos.SysUser object) {
        return object.getUserId();
    }

    /**
     * Find records that have <code>USER_ACCOUNT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByUserAccount(Collection<String> values) {
        return findManyByCondition(SysUser.SYS_USER.USER_ACCOUNT.in(values));
    }

    /**
     * Find records that have <code>USER_PASSWORD IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByUserPassword(Collection<String> values) {
        return findManyByCondition(SysUser.SYS_USER.USER_PASSWORD.in(values));
    }

    /**
     * Find records that have <code>USER_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByUserName(Collection<String> values) {
        return findManyByCondition(SysUser.SYS_USER.USER_NAME.in(values));
    }

    /**
     * Find records that have <code>PHONE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByPhone(Collection<String> values) {
        return findManyByCondition(SysUser.SYS_USER.PHONE.in(values));
    }

    /**
     * Find records that have <code>ADD_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByAddTime(Collection<LocalDateTime> values) {
        return findManyByCondition(SysUser.SYS_USER.ADD_TIME.in(values));
    }

    /**
     * Find records that have <code>LOGIN_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByLoginTime(Collection<LocalDateTime> values) {
        return findManyByCondition(SysUser.SYS_USER.LOGIN_TIME.in(values));
    }

    /**
     * Find records that have <code>LOGIN_IP IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByLoginIp(Collection<String> values) {
        return findManyByCondition(SysUser.SYS_USER.LOGIN_IP.in(values));
    }

    /**
     * Find records that have <code>STATUS IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByStatus(Collection<Integer> values) {
        return findManyByCondition(SysUser.SYS_USER.STATUS.in(values));
    }

    /**
     * Find records that have <code>WX_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByWxId(Collection<String> values) {
        return findManyByCondition(SysUser.SYS_USER.WX_ID.in(values));
    }

    /**
     * Find records that have <code>IMG_URL IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByImgUrl(Collection<String> values) {
        return findManyByCondition(SysUser.SYS_USER.IMG_URL.in(values));
    }

    /**
     * Find records that have <code>MAIL IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysUser>> findManyByMail(Collection<String> values) {
        return findManyByCondition(SysUser.SYS_USER.MAIL.in(values));
    }

    @Override
    public JDBCCompletableFutureQueryExecutor<SysUserRecord,io.kida.model.tables.pojos.SysUser,Long> queryExecutor(){
        return (JDBCCompletableFutureQueryExecutor<SysUserRecord,io.kida.model.tables.pojos.SysUser,Long>) super.queryExecutor();
    }
}
