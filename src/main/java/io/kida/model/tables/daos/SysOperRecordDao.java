/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.kida.model.tables.SysOperRecord;
import io.kida.model.tables.records.SysOperRecordRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO;
import io.github.jklingsporn.vertx.jooq.completablefuture.jdbc.JDBCCompletableFutureQueryExecutor;
/**
 * 系统操作记录表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysOperRecordDao extends AbstractVertxDAO<SysOperRecordRecord, io.kida.model.tables.pojos.SysOperRecord, Long, CompletableFuture<List<io.kida.model.tables.pojos.SysOperRecord>>, CompletableFuture<io.kida.model.tables.pojos.SysOperRecord>, CompletableFuture<Integer>, CompletableFuture<Long>> implements io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO<SysOperRecordRecord,io.kida.model.tables.pojos.SysOperRecord,Long> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public SysOperRecordDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(SysOperRecord.SYS_OPER_RECORD, io.kida.model.tables.pojos.SysOperRecord.class, new JDBCCompletableFutureQueryExecutor<SysOperRecordRecord,io.kida.model.tables.pojos.SysOperRecord,Long>(configuration,io.kida.model.tables.pojos.SysOperRecord.class,vertx));
    }

    @Override
    protected Long getId(io.kida.model.tables.pojos.SysOperRecord object) {
        return object.getOperId();
    }

    /**
     * Find records that have <code>USER_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysOperRecord>> findManyByUserId(Collection<Long> values) {
        return findManyByCondition(SysOperRecord.SYS_OPER_RECORD.USER_ID.in(values));
    }

    /**
     * Find records that have <code>OPER_PAGE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysOperRecord>> findManyByOperPage(Collection<String> values) {
        return findManyByCondition(SysOperRecord.SYS_OPER_RECORD.OPER_PAGE.in(values));
    }

    /**
     * Find records that have <code>OPER_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysOperRecord>> findManyByOperTime(Collection<LocalDateTime> values) {
        return findManyByCondition(SysOperRecord.SYS_OPER_RECORD.OPER_TIME.in(values));
    }

    /**
     * Find records that have <code>OPER_BEFORE_JSON IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysOperRecord>> findManyByOperBeforeJson(Collection<String> values) {
        return findManyByCondition(SysOperRecord.SYS_OPER_RECORD.OPER_BEFORE_JSON.in(values));
    }

    /**
     * Find records that have <code>OPER_AFTER_JSON IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysOperRecord>> findManyByOperAfterJson(Collection<String> values) {
        return findManyByCondition(SysOperRecord.SYS_OPER_RECORD.OPER_AFTER_JSON.in(values));
    }

    /**
     * Find records that have <code>OPER_CONTENT IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysOperRecord>> findManyByOperContent(Collection<String> values) {
        return findManyByCondition(SysOperRecord.SYS_OPER_RECORD.OPER_CONTENT.in(values));
    }

    @Override
    public JDBCCompletableFutureQueryExecutor<SysOperRecordRecord,io.kida.model.tables.pojos.SysOperRecord,Long> queryExecutor(){
        return (JDBCCompletableFutureQueryExecutor<SysOperRecordRecord,io.kida.model.tables.pojos.SysOperRecord,Long>) super.queryExecutor();
    }
}
