/*
 * This file is generated by jOOQ.
 */
package io.kida.model.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.kida.model.tables.SysRole;
import io.kida.model.tables.records.SysRoleRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import java.util.concurrent.CompletableFuture;
import io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO;
import io.github.jklingsporn.vertx.jooq.completablefuture.jdbc.JDBCCompletableFutureQueryExecutor;
/**
 * 角色表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysRoleDao extends AbstractVertxDAO<SysRoleRecord, io.kida.model.tables.pojos.SysRole, Long, CompletableFuture<List<io.kida.model.tables.pojos.SysRole>>, CompletableFuture<io.kida.model.tables.pojos.SysRole>, CompletableFuture<Integer>, CompletableFuture<Long>> implements io.github.jklingsporn.vertx.jooq.completablefuture.VertxDAO<SysRoleRecord,io.kida.model.tables.pojos.SysRole,Long> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public SysRoleDao(Configuration configuration, io.vertx.core.Vertx vertx) {
        super(SysRole.SYS_ROLE, io.kida.model.tables.pojos.SysRole.class, new JDBCCompletableFutureQueryExecutor<SysRoleRecord,io.kida.model.tables.pojos.SysRole,Long>(configuration,io.kida.model.tables.pojos.SysRole.class,vertx));
    }

    @Override
    protected Long getId(io.kida.model.tables.pojos.SysRole object) {
        return object.getRoleId();
    }

    /**
     * Find records that have <code>ROLE_CODE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRole>> findManyByRoleCode(Collection<String> values) {
        return findManyByCondition(SysRole.SYS_ROLE.ROLE_CODE.in(values));
    }

    /**
     * Find records that have <code>ROLE_NAME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRole>> findManyByRoleName(Collection<String> values) {
        return findManyByCondition(SysRole.SYS_ROLE.ROLE_NAME.in(values));
    }

    /**
     * Find records that have <code>ALIVE_FLAG IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRole>> findManyByAliveFlag(Collection<Integer> values) {
        return findManyByCondition(SysRole.SYS_ROLE.ALIVE_FLAG.in(values));
    }

    /**
     * Find records that have <code>ADD_USER_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRole>> findManyByAddUserId(Collection<Long> values) {
        return findManyByCondition(SysRole.SYS_ROLE.ADD_USER_ID.in(values));
    }

    /**
     * Find records that have <code>ADD_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRole>> findManyByAddTime(Collection<LocalDateTime> values) {
        return findManyByCondition(SysRole.SYS_ROLE.ADD_TIME.in(values));
    }

    /**
     * Find records that have <code>OPR_USER_ID IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRole>> findManyByOprUserId(Collection<Long> values) {
        return findManyByCondition(SysRole.SYS_ROLE.OPR_USER_ID.in(values));
    }

    /**
     * Find records that have <code>OPR_TIME IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRole>> findManyByOprTime(Collection<LocalDateTime> values) {
        return findManyByCondition(SysRole.SYS_ROLE.OPR_TIME.in(values));
    }

    /**
     * Find records that have <code>ROLE_TYPE IN (values)</code> asynchronously
     */
    public CompletableFuture<List<io.kida.model.tables.pojos.SysRole>> findManyByRoleType(Collection<Integer> values) {
        return findManyByCondition(SysRole.SYS_ROLE.ROLE_TYPE.in(values));
    }

    @Override
    public JDBCCompletableFutureQueryExecutor<SysRoleRecord,io.kida.model.tables.pojos.SysRole,Long> queryExecutor(){
        return (JDBCCompletableFutureQueryExecutor<SysRoleRecord,io.kida.model.tables.pojos.SysRole,Long>) super.queryExecutor();
    }
}
